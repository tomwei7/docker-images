name: Docker

on:
  push:
    branches: [ "main" ]

jobs:
  setup:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.images.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: images
        run: |
          echo "images=$(find ./* -maxdepth 1 -type d -not -path '*/.*' | sed 's/\.\///g' | jq -Rnc '[inputs]')" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.images.outputs.images }}"
  build:
    permissions:
      contents: read
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{fromJSON(needs.setup.outputs.images)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get image tag
        id: meta
        run: |
          if [[ ! -f ${{ matrix.image }}/TAG ]]; then
              echo ":error: TAG file not found in ${{ matrix.image }}"
              exit 1
          fi
          echo "tag=${{ github.actor }}/${{ matrix.image }}:$(cat ${{ matrix.image }}/TAG)" >> $GITHUB_OUTPUT

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ matrix.image }}
          tags: ${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
